#!/usr/bin/env ruby

require 'fileutils'
require 'open3'

def message(str)
  $stderr.puts('Message: ' + str)
end

def warn(str)
  $stderr.puts('Warning: ' + str)
end

def fail(str)
  $stderr.puts('Error: ' + str)
  exit
end

$stdout.sync = true
repo_clean = `git status --porcelain`.empty?

fail 'git repo needs to be clean to run oss-check. Aborting.' unless repo_clean

@working_dir = 'osscheck'

if `git symbolic-ref HEAD --short`.strip == 'master'
  fail "can't run osscheck from 'master' as the script compares "\
       "the performance of this branch against 'master'"
end

class Repo
  attr_accessor :name
  attr_accessor :github_location
  attr_accessor :commit_hash
  attr_accessor :branch_duration
  attr_accessor :master_duration

  def initialize(name, github_location)
    @name = name
    @github_location = github_location
  end

  def git_url
    "https://github.com/#{github_location}"
  end

  def to_s
    @name
  end

  def duration_report
    percent_change = 100 * (@master_duration - @branch_duration) / @master_duration
    faster_slower = nil
    if @branch_duration < @master_duration
      faster_slower = 'faster'
    else
      faster_slower = 'slower'
      percent_change *= -1
    end
    "Linting #{self} with this PR took #{@branch_duration}s " \
    "vs #{@master_duration}s on master (#{percent_change.to_i}\% #{faster_slower})"
  end
end

@repos = [
  Repo.new('Alamofire', 'Alamofire/Alamofire'),
  Repo.new('Swift', 'apple/swift'),
  Repo.new('Aerial', 'JohnCoates/Aerial'),
  Repo.new('SourceKitten', 'jpsim/SourceKitten'),
  Repo.new('Sourcery', 'krzysztofzablocki/Sourcery'),
  Repo.new('Kickstarter', 'kickstarter/ios-oss'),
  Repo.new('Moya', 'Moya/Moya'),
  Repo.new('Firefox', 'mozilla-mobile/firefox-ios'),
  Repo.new('Nimble', 'Quick/Nimble'),
  Repo.new('Quick', 'Quick/Quick'),
  Repo.new('Realm', 'realm/realm-cocoa'),
  Repo.new('WordPress', 'wordpress-mobile/WordPress-iOS')
]

def convert_to_link(repo, string)
  string.sub!("#{Dir.pwd}/#{@working_dir}/#{repo.name}", '')
  string.sub!('.swift:', '.swift#L')
  string = string.partition(': warning:').first.partition(': error:').first
  "#{repo.git_url}/blob/#{repo.commit_hash}#{string}"
end

def non_empty_lines(path)
  File.read(path).split(/\n+/).reject(&:empty?)
end

def generate_reports(clone, branch)
  Dir.chdir(@working_dir) do
    @repos.each do |repo|
      if clone
        puts "Cloning #{repo.name}"
        `git clone "https://github.com/#{repo}" --depth 1 2> /dev/null`
        if repo.name == 'swift'
          File.open('swift/.swiftlint.yml', 'w') do |file|
            file << 'included: stdlib'
          end
        end
      end
      Dir.chdir(repo.name) do
        iterations = 5
        print "Linting #{iterations} iterations of #{repo.name} with #{branch}: 1"
        repo.commit_hash = `git rev-parse HEAD`.strip
        durations = []
        start = Time.now
        command = '../../.build/release/swiftlint lint --no-cache --enable-all-rules --reporter xcode'
        File.open("../#{branch}_reports/#{repo.name}.txt", 'w') do |file|
          Open3.popen3(command) do |_, stdout, _, _|
            file << stdout.read.chomp
          end
        end
        durations << Time.now - start
        for i in 2..iterations
          print "..#{i}"
          start = Time.now
          Open3.popen3(command) { |_, stdout, _, _| stdout.read }
          durations << Time.now - start
        end
        puts ''
        average_duration = (durations.reduce(:+) / iterations).round(2)
        if branch == 'branch'
          repo.branch_duration = average_duration
        else
          repo.master_duration = average_duration
        end
      end
    end
  end
end

# Prep
["#{@working_dir}/branch_reports", "#{@working_dir}/master_reports"].each do |dir|
  FileUtils.mkdir_p(dir)
end

# Build branch
puts 'Building branch'
`swift build -c release`

# Generate branch reports
generate_reports(true, 'branch')
# Build master
`git fetch`
`git checkout origin/master`
puts 'Building master'
`swift build -c release`
unless $?.success?
  # Couldn't build, start fresh
  FileUtils.rm_rf %w[Packages .build]
  return_value = nil
  Open3.popen3('swift build -c release') do |_, stdout, _, wait_thr|
    puts stdout.read.chomp
    return_value = wait_thr.value
  end

  unless return_value.success?
    fail 'Could not build master'
    return
  end
end

# Generate master reports
generate_reports(false, 'master')
# Diff and report changes to Danger
@repos.each do |repo|
  branch = non_empty_lines("#{@working_dir}/branch_reports/#{repo.name}.txt")
  master = non_empty_lines("#{@working_dir}/master_reports/#{repo.name}.txt")

  (master - branch).each do |fixed|
    message "This PR fixed a violation in #{repo.name}: [#{fixed}](#{convert_to_link(repo, fixed)})"
  end
  (branch - master).each do |violation|
    warn "This PR introduced a violation in #{repo.name}: [#{violation}](#{convert_to_link(repo, violation)})"
  end
end

@repos.each do |repo|
  message repo.duration_report
end

# Clean up
`git reset --hard HEAD`
FileUtils.rm_rf(@working_dir)
`git checkout -`
